# Build and publish a Docker image.
name: Build and publish docker images

on:
  push:
    branches: ["main"]
    # Publish semver tags as releases.
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  UV_VERSION: 0.6
  PYTHON_VERSION: 3.12

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  # Job 1: Update Lock File
  update-lockfile:
    name: Update Python Lock File
    runs-on: ubuntu-latest
    outputs:
      scm_version: ${{ steps.get_scm_version.outputs.scm_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Update lock file
        run: uv lock --upgrade-package nomad-lab

      # Commits any changes made to the lockfile
      - name: Commit lock file changes
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          git add uv.lock
          if [[ `git status --porcelain` ]]; then
            git commit -m "Update lockfile"
            git push origin -o ci.skip # prevent triggering the pipeline again
          fi

      - name: Get SCM Version
        id: get_scm_version
        run: |
          SCM_VERSION=$(uvx --with setuptools_scm python -m setuptools_scm)
          echo "SCM version: $SCM_VERSION"
          echo "scm_version=$SCM_VERSION" >> "$GITHUB_OUTPUT"

  # Job 2: Run unit tests for all of the plugin
  plugin_unit_tests:
    name: Run plugin unit tests
    needs: update-lockfile
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        group: [1, 2]
    env:
      PLUGIN_TESTS_CI_NODE_TOTAL: 2
      # If you want to skip the unit tests for some plugins, add them to the list below
      PLUGIN_TESTS_PLUGINS_TO_SKIP: |
        workflowparsers
        nomad_porous_materials
        simulationworkflowschema
        databaseparsers
        soapnormalizer
        eelsdbparser
        atomisticparsers
        nomad_aitoolkit
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Download plugin tests script
        run: |
          curl -sSL "https://gitlab.mpcdf.mpg.de/nomad-lab/nomad-distro/-/raw/main/scripts/plugin_tests.py" -o plugin_tests.py

      - name: Run plugin tests
        env:
          PLUGIN_TESTS_CI_NODE_INDEX: ${{ matrix.group }}
        run: |
          # replace the yaml list with a string, use a `,` to separate the plugins
          PLUGINS_STRING=$(echo "$PLUGIN_TESTS_PLUGINS_TO_SKIP" | tr '\n' ',' | sed 's/,$//')
          uv run --extra plugins plugin_tests.py --plugins-to-skip "$PLUGINS_STRING"

  # Job 3: Run example upload tests
  example_upload_tests:
    name: Run example upload tests
    needs: update-lockfile
    runs-on: ubuntu-latest
    services:
      rabbitmq:
        image: rabbitmq:3.11.5
        env:
          RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
          RABBITMQ_DEFAULT_USER: rabbitmq
          RABBITMQ_DEFAULT_PASS: rabbitmq
          RABBITMQ_DEFAULT_VHOST: /
      elastic:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.1
        env:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
          discovery.type: single-node
          xpack.security.enabled: "false"
      mongo:
        image: mongo:5.0.6
    env:
      NOMAD_RABBITMQ_HOST: rabbitmq
      NOMAD_ELASTIC_HOST: elastic
      NOMAD_MONGO_HOST: mongo
      NOMAD_KEYCLOAK_PASSWORD: ${CI_KEYCLOAK_ADMIN_PASSWORD}
      NOMAD_NORMALIZE_SPRINGER_DB_PATH: /nomad/fairdi/db/data/springer.msg
      UV_EXTRA_INDEX_URL: "https://gitlab.mpcdf.mpg.de/api/v4/projects/2187/packages/pypi/simple"

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

  # Job 4: Build and Push Docker Image
  docker-publish:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: update-lockfile

    strategy:
      fail-fast: false
      matrix:
        service: [app, jupyter]

    env:
      SETUPTOOLS_SCM_PRETEND_VERSION_FOR_NOMAD_DISTRIBUTION: ${{ needs.update-lockfile.outputs.scm_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}${{ matrix.service == 'jupyter' && '/jupyter' || '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          build-args: |
            SETUPTOOLS_SCM_PRETEND_VERSION_FOR_NOMAD_DISTRIBUTION=${{ env.SETUPTOOLS_SCM_PRETEND_VERSION_FOR_NOMAD_DISTRIBUTION }}
            UV_VERSION=${{ env.UV_VERSION }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: ${{ matrix.service == 'jupyter' && 'jupyter' || 'final' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
